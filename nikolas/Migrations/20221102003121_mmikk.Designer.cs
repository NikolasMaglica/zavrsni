// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using aplikacija_server.Entities;

#nullable disable

namespace nikolas.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20221102003121_mmikk")]
    partial class mmikk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("nikolas.Entities.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"), 1L, 1);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("PhoneNumber")
                        .HasMaxLength(60)
                        .HasColumnType("int");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<string>("MaterialDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MaterialInStockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("MaterialPrice")
                        .HasMaxLength(6)
                        .HasColumnType("float");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Material_Offer", b =>
                {
                    b.Property<int>("MaterialID")
                        .HasColumnType("int");

                    b.Property<int>("OfferID")
                        .HasColumnType("int");

                    b.Property<int>("Material_OfferDiscount")
                        .HasColumnType("int");

                    b.Property<int>("Material_OfferQuantity")
                        .HasColumnType("int");

                    b.HasKey("MaterialID", "OfferID");

                    b.HasIndex("OfferID");

                    b.ToTable("Material_Offers");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("OfferPrice")
                        .HasColumnType("int");

                    b.Property<int>("Offer_StatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("OfferId");

                    b.HasIndex("ClientId");

                    b.HasIndex("Offer_StatusID");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Offer_Status", b =>
                {
                    b.Property<int>("OfferStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferStatusId"), 1L, 1);

                    b.Property<string>("Offer_Statusstatus")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("OfferStatusId");

                    b.ToTable("Offer_Statuses");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Order_Material", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Order_MaterialQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Order_StatusId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("Order_StatusId");

                    b.ToTable("Order_Materials");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Order_Status", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"), 1L, 1);

                    b.Property<string>("OrderStatusStatus")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("Order_Status");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("price")
                        .HasMaxLength(4)
                        .HasColumnType("float");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Service_Offer", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("OfferID")
                        .HasColumnType("int");

                    b.Property<int>("Service_OfferDiscount")
                        .HasColumnType("int");

                    b.Property<int>("Service_OfferQuantity")
                        .HasColumnType("int");

                    b.HasKey("ServiceId", "OfferID");

                    b.HasIndex("OfferID");

                    b.ToTable("Service_Offers");
                });

            modelBuilder.Entity("nikolas.Entities.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("KilometresTraveled")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("ProductionYear")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("Vehicle_TypeId")
                        .HasColumnType("int");

                    b.Property<string>("manufactrer")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("model")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("VehicleId");

                    b.HasIndex("ClientId");

                    b.HasIndex("Vehicle_TypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Vehicle_Type", b =>
                {
                    b.Property<int>("Vehicle_TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Vehicle_TypeId"), 1L, 1);

                    b.Property<string>("Vehicle_TypeName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Vehicle_TypeId");

                    b.ToTable("Vehicle_Type");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Material_Offer", b =>
                {
                    b.HasOne("nikolas.Entities.Models.Material", "Material")
                        .WithMany("Material_Offers")
                        .HasForeignKey("MaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.Offer", "Offer")
                        .WithMany("Material_Offers")
                        .HasForeignKey("OfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Offer", b =>
                {
                    b.HasOne("nikolas.Entities.Models.Client", "Clients")
                        .WithMany("Offers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.Offer_Status", "Offer_Statuses")
                        .WithMany("Offers")
                        .HasForeignKey("Offer_StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.User", "Users")
                        .WithMany("Offers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.Vehicle", "Vehicles")
                        .WithMany("Offers")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");

                    b.Navigation("Offer_Statuses");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Order", b =>
                {
                    b.HasOne("nikolas.Entities.Models.User", "USers")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("USers");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Order_Material", b =>
                {
                    b.HasOne("nikolas.Entities.Models.Material", "Material")
                        .WithMany("Order_Materials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.Order", "Order")
                        .WithMany("Order_Materials")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.Order_Status", "Order_Statuses")
                        .WithMany("Order_Materials")
                        .HasForeignKey("Order_StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Order");

                    b.Navigation("Order_Statuses");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Service_Offer", b =>
                {
                    b.HasOne("nikolas.Entities.Models.Offer", "Offer")
                        .WithMany("Service_Offers")
                        .HasForeignKey("OfferID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.Service", "Service")
                        .WithMany("Service_Offer")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Vehicle", b =>
                {
                    b.HasOne("nikolas.Entities.Models.Client", "Clients")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("nikolas.Entities.Models.Vehicle_Type", "Vehicles")
                        .WithMany("Vehicles")
                        .HasForeignKey("Vehicle_TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clients");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Client", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Material", b =>
                {
                    b.Navigation("Material_Offers");

                    b.Navigation("Order_Materials");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Offer", b =>
                {
                    b.Navigation("Material_Offers");

                    b.Navigation("Service_Offers");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Offer_Status", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Order", b =>
                {
                    b.Navigation("Order_Materials");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Order_Status", b =>
                {
                    b.Navigation("Order_Materials");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Service", b =>
                {
                    b.Navigation("Service_Offer");
                });

            modelBuilder.Entity("nikolas.Entities.Models.User", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Vehicle", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("nikolas.Entities.Models.Vehicle_Type", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
